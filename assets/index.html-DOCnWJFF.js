import{_ as p,c as k,a as h,d as s,b as t,e as a,w as l,r as e,o as r}from"./app-gdwmcdjK.js";const d={};function g(o,i){const n=e("font");return r(),k("div",null,[i[8]||(i[8]=h('<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>面向对象(Object Oriented)是软件开发方法，一种编程范式。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。</p><p>面向对象是相对于面向过程来讲的，面向对象方法<strong>把相关的数据和方法组织为一个整体</strong>来看待，从更高的层次来进行系统建模，更贴近事物的自然运行模式。</p><ul><li>面向过程：就是分析出解决问题所需要的<strong>步骤</strong>，然后用<strong>函数</strong>把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</li><li>面向对象：是把构成问题事务分解成<strong>各个对象</strong>，建立对象的目的不是为了完成一个步骤，而是为了<strong>描述某个事物</strong>在整个解决问题的步骤中的行为。</li></ul><h2 id="四大特性" tabindex="-1"><a class="header-anchor" href="#四大特性"><span>四大特性</span></a></h2><p>面向对象主要有四大特征：抽象、封装、继承、多态。</p><ul><li><strong>抽象(abstract)</strong></li></ul>',7)),s("p",null,[i[1]||(i[1]=a("抽象是将类对象的共同特征总结、提取出来构造类的过程，包括数据抽象和行为抽象两方面，抽象只关注对象的哪些")),t(n,{style:{"background-color":"#FBDE28"}},{default:l(()=>i[0]||(i[0]=[a("属性和行为")])),_:1}),i[2]||(i[2]=a("，并不关注这此行为的细节是什么。"))]),i[9]||(i[9]=s("p",null,"属性抽象 -->表示世界中一类事物的特征，就是对象的属性。比如鸟有翅膀，羽毛等(类的属性)",-1)),i[10]||(i[10]=s("p",null,"行为抽象 -->表示世界中一类事物的行为，就是对象的行为。比如鸟会飞，会叫(类的方法)",-1)),i[11]||(i[11]=s("ul",null,[s("li",null,[s("strong",null,"封装(encapsulation )")])],-1)),s("p",null,[i[4]||(i[4]=a("通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。面向对象的本质就是将现实世界描绘成一系列完全自治，封闭的对象，可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口。封装给对象")),t(n,{style:{"background-color":"#FBDE28"}},{default:l(()=>i[3]||(i[3]=[a("提供了隐藏内部特性和行为的能力")])),_:1}),i[5]||(i[5]=a("，对象提供一些能这被其它对象访问的方法来改变它内部的数据。"))]),i[12]||(i[12]=h('<p>封装保证了模块具有较好的独立性，使得程序维护修改较为容易。对应用程序的修改仅限于类的内部，因而可以将应用程序修改带来的影响减少到最低限度。</p><ul><li><strong>继承(inheritance)</strong></li></ul><p>继承是从已有类得到继承信息创建新类的过程，继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要手段。子类继承父类属性(静态特征)和方法(动态特征)，继承必须遵循封装当中的控制访问</p><ul><li><strong>多态(Polymorhism)</strong></li></ul><p>多态是指允许不同类的对象对同一消息做出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活/抽象/行为共享/代码共享的优势，很好的解决了应用程序函数同名问题。总的来说，方法的重写，重载与动态链接构成多态性。</p><p><strong>动态链接</strong> --&gt;对于父类中定义的方法，如果子类中重写了该方法，那么父类类型的引用将调用子类中的这个方法，这就是动态链接。</p><h2 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象"><span>类和对象</span></a></h2><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250405205927378.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',8)),t(n,{style:{"background-color":"#FBDE28"}},{default:l(()=>i[6]||(i[6]=[a("什么是类？")])),_:1}),i[13]||(i[13]=s("p",null,[s("strong",null,"类，即类别：类是具有相似属性和行为的一组实例集合")],-1)),i[14]||(i[14]=s("figure",null,[s("img",{src:"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250405205927379.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),t(n,{style:{"background-color":"#FBDE28"}},{default:l(()=>i[7]||(i[7]=[a("什么是对象？")])),_:1}),i[15]||(i[15]=h(`<p>在生活中，像张三，李四，王五，这样真真正正存在人的实体，我们称这些实体为对象。</p><p>在计算机中，类的实例就是对象。</p><h2 id="_4、类的创建和对象的实例化" tabindex="-1"><a class="header-anchor" href="#_4、类的创建和对象的实例化"><span>4、类的创建和对象的实例化</span></a></h2><p>类的创建和C语言中的结构体类似，只不过关键变成了class，当然其实也是可以使用struct的。</p><p>类中除了可以定义成员变量(属性)之外，还可以定义成员函数(方法)，类还可以设置访问权限，可以控制类中的成员在何处能访问。</p><p>三个访问权限限定符：用来设置成员变量和成员函数的访问属性。</p><ul><li><code>public</code>：公有成员，它们允许被本类或其它类的成员函数(通过对象)访问或调用，是类的外部接口，<strong>成员函数</strong>一般定义为public属性;</li><li><code>private</code>：私有成员，它们只允许被本类的成员函数访问，<strong>数据成员</strong>一般定义为private属性;</li><li><code>protected</code>：保护成员，它们允许被本类的成员函数和派生类的成员函数访问或调用。</li></ul><p><strong>示例</strong></p><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250405205927380.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>class和struct的区别</p><p><strong>前面说道class也是可以用struct替代的，那么他们两个之间有什么区别吗？</strong></p><p>区别只有一个：<code>struct</code>定义的类属性是<strong>默认公有</strong>的，而<code>calss</code>定义的类<strong>属性是私有</strong>的，其他的没有区别</p><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250405205927381.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_5、类的定义和成员函数定义分离" tabindex="-1"><a class="header-anchor" href="#_5、类的定义和成员函数定义分离"><span>5、类的定义和成员函数定义分离</span></a></h2><p>一般将类的定义放在头文件(.h) 中，类的实现放在源文件(.cpp) 中，而main主函数可以放在另一个源文件中。</p><p><strong>何谓分离？即把函数的定义放在类的外部实现！</strong></p><p>成员函数的定义方式与其他函数的定义方式基本相同，但必须在成员函数名前面加上**类名和作用域限定符(**简称域运算符)</p><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250405205927382.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_6、练习" tabindex="-1"><a class="header-anchor" href="#_6、练习"><span>6、练习</span></a></h2><p>编写C++程序完成以下功能：<br> 1)定义一个Point类，其属性包括点的坐标，提供计算两点之间距离的方法。<br> 2)定义一个圆形类，其属性包括圆心和半径。<br> 3)创建两个圆形对象，提示用户输入圆心坐标和半径，判断两个圆是否相交，并输出结果。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Point</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	Point</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">_x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">_y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	float</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> towPointDistance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Point</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> other</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">		return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sqrt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_x </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> other</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> pow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_y </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> other</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Circle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	Circle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">():</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">_radius</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	Circle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">_center</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">_radius</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> intersect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Circle</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> other</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">		return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _center</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">towPointDistance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">other</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_center</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _radius </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> other</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_radius</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	Point _center</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _radius</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	Point </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">p1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> p2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">towPointDistance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">p2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	Circle </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">r1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> r2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> boolalpha</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">r1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">intersect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">r2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21))])}const c=p(d,[["render",g]]),A=JSON.parse('{"path":"/Cpp/plafpt1p/","title":"类和对象","lang":"zh-CN","frontmatter":{"title":"类和对象","createTime":"2025/04/06 16:52:25","permalink":"/Cpp/plafpt1p/","description":"概念 面向对象(Object Oriented)是软件开发方法，一种编程范式。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。 面向对象是相对于面向过程来讲的，面向对象方法把相关的数据和方法组织为一个整体来看待，从更高的层次来进行系统建模，更贴近事物的自然运行模式。 面向过程：就是分析出解决问题所需要的步骤，然后用函数...","head":[["meta",{"property":"og:url","content":"https://xiaokcoding.top/Cpp/plafpt1p/"}],["meta",{"property":"og:site_name","content":"XiaokCoding"}],["meta",{"property":"og:title","content":"类和对象"}],["meta",{"property":"og:description","content":"概念 面向对象(Object Oriented)是软件开发方法，一种编程范式。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。 面向对象是相对于面向过程来讲的，面向对象方法把相关的数据和方法组织为一个整体来看待，从更高的层次来进行系统建模，更贴近事物的自然运行模式。 面向过程：就是分析出解决问题所需要的步骤，然后用函数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250405205927378.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-14T05:32:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-14T05:32:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类和对象\\",\\"image\\":[\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250405205927378.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250405205927379.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250405205927380.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250405205927381.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250405205927382.png\\"],\\"dateModified\\":\\"2025-04-14T05:32:06.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":5.46,"words":1637},"git":{"updatedTime":1744608726000,"contributors":[{"name":"xiaokcoding","username":"xiaokcoding","email":"1512392199@qq.com","commits":7,"avatar":"https://avatars.githubusercontent.com/xiaokcoding?v=4","url":"https://github.com/xiaokcoding"}]},"autoDesc":true,"filePathRelative":"notes/Cpp/02 . 类和对象.md"}');export{c as comp,A as data};
