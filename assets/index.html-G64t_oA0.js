import{_ as a,c as n,a as e,o as t}from"./app-gdwmcdjK.js";const o={};function g(c,i){return t(),n("div",null,i[0]||(i[0]=[e('<h2 id="三个重要问题「点对点信道」" tabindex="-1"><a class="header-anchor" href="#三个重要问题「点对点信道」"><span>三个重要问题「点对点信道」</span></a></h2><h3 id="封装成帧" tabindex="-1"><a class="header-anchor" href="#封装成帧"><span>封装成帧</span></a></h3><ul><li>封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧「帧头和帧尾中包含重要的控制信息，作用之一就是帧定界」。</li><li>透明传输是指数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样。 <ul><li>面向字节的物理链路使用字节填充的方法实现透明传输</li><li>面向比特的物理链路使用比特填充的方法实现透明传输</li><li><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403145.png" alt="image-20250306084912764" tabindex="0" loading="lazy"><figcaption>image-20250306084912764</figcaption></li></ul></li><li>为了提高帧的传输效率，应当使帧的数据部分的长度尽能大些「Max：最大传送单元MTU/差错控制...」</li></ul><h3 id="差错检测" tabindex="-1"><a class="header-anchor" href="#差错检测"><span>差错检测</span></a></h3><ul><li>检错码只能检测出帧在传输过程中出现了差错，但并不能定位错误，因此无法纠正错误。</li><li>要想纠正传输中的差错，可以使用冗余信息更多的纠错码进行前向纠错，但纠错码的开销比价大，在计算机网络中较少使用。</li><li>循环冗余校验CRC有很好的检错能力「漏检率非常低」，易于用硬件实现，因此被广泛应用于数据链路层。</li></ul><h3 id="可靠传输" tabindex="-1"><a class="header-anchor" href="#可靠传输"><span>可靠传输</span></a></h3><p><u>发送端发送什么，接收端就收到什么</u>，可靠传输的实现机制：</p><ul><li>停止-等待协议SW：发送方每发送一个数据帧后，等待接收方的确认（ACK）才能发送下一帧「如果超时未收到ACK，发送方重传该帧」</li><li>回退N帧协议GBN：发送方可以连续发送多个数据帧，无需等待单个数据帧，接收方只按顺序确认，若某帧出错，丢弃该帧及后续所有帧，发送方需从出错帧开始重传。</li><li>选择性重传协议SR：发送发可以连续发送多个数据帧，接受方对每个帧单独确认，若某帧出错，发送方只需重传出错的帧，其余帧无需重传。</li></ul><h2 id="ppp协议" tabindex="-1"><a class="header-anchor" href="#ppp协议"><span>PPP协议</span></a></h2><p>PPP协议为在点对点链路传输各种协议数据报提供了一个标准方法，主要有：对各种协议数据报的封装方法「封装成帧」、链路控制协议LCP「用于建立、配置以及测试数据链路的链接」、一套网络控制协议NCPs「其中的每一个协议支持不同的网络层协议」</p><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403258.png" alt="image-20250310205236491" tabindex="0" loading="lazy"><figcaption>image-20250310205236491</figcaption></figure><p>PPP的帧格式：</p><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403157.png" alt="image-20250310205813760" tabindex="0" loading="lazy"><figcaption>image-20250310205813760</figcaption></figure><ul><li>F字段为帧定界符「0x7E」</li><li>A「0xFF」和C「0x03」字段为预留字段</li><li>P字段是协议字段</li><li>FCS字段是使用CRC的检验序列</li></ul><h2 id="媒体接入控制mac" tabindex="-1"><a class="header-anchor" href="#媒体接入控制mac"><span>媒体接入控制MAC</span></a></h2><h3 id="静态划分信道" tabindex="-1"><a class="header-anchor" href="#静态划分信道"><span>静态划分信道</span></a></h3><ul><li>频分复用FDM：频分复用的所有用户同时占用不用的频带资源进行通信。</li><li>时分复用TDM：时分复用的所有用户在不同的时间占用同样的频带宽度。</li><li>波分复用WDM：光的频分复用。</li><li>码分复用CDM：每个用户分配一个独特的码片序列（通常是正交的伪随机码），发送方将数据与码片序列相乘后发送，接收方用相同的码片序列解码，提取特定用户的数据。</li><li><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403165.png" alt="image-20250310213139036" tabindex="0" loading="lazy"><figcaption>image-20250310213139036</figcaption></li></ul><h3 id="动态接入控制" tabindex="-1"><a class="header-anchor" href="#动态接入控制"><span>动态接入控制</span></a></h3><ul><li>CSMA/CD「载波监听多址接入/碰撞检测-总线局域网」 <ul><li>MA「多址接入」：多个站连接在一条总线上，竞争使用总线</li><li>CS「载波监听」：每一个站在发送帧之前先要检测一下总线上是否有其他站点在发送帧（先听后说）</li><li>CD「碰撞检测」：每一个正在发送帧的站边发送边检测碰撞（边说边听）</li><li>争用期「碰撞窗口」：主机最多经过2τ「τ：端到端传播时延」的时长就可检测到本次发送是否遭受了碰撞，经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞</li><li>截断二进制指数退避算法：当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用截断二进制指数退避算法来确定。 <ul><li><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403228.png" alt="image-20250312181223688" tabindex="0" loading="lazy"><figcaption>image-20250312181223688</figcaption></li></ul></li></ul></li><li>CSMA/CA「载波监听多址接入/碰撞避免-无线局域网」-802.11 <ul><li>退避算法：当要发送帧的站点检测到新道从忙状态转为空闲时，都要执行退避算法。</li><li>所有的站在完成发送后，必须等待一段帧间间隔时间才能发送下一帧「帧间间隔的长短取决于该站要发送的帧的优先级」</li><li>无线局域网的MAC帧首部中有一个持续期字段，用来填入帧本帧结束后还要占用信道多久时间，其他站点通过该字段可实现虚拟载波监听。</li><li>允许要发送数据的站点对信道进行预约，即在发送数据帧之前先发送请求发送RTS帧，在收到响应允许发送CTS帧后，就可发送数据帧。</li></ul></li></ul><h2 id="mac地址" tabindex="-1"><a class="header-anchor" href="#mac地址"><span>MAC地址</span></a></h2><p>MAC地址是数据链路层地址，长度为6字节「48位」，唯一标识网络上各个接口，例如网卡，交换机和路由器有更多的网络接口，所以拥有更多的MAC地址。</p><h2 id="集线器与交换机" tabindex="-1"><a class="header-anchor" href="#集线器与交换机"><span>集线器与交换机</span></a></h2><p><strong>以太网帧格式：</strong></p><ul><li>类型：标记上层使用的协议</li><li>数据：长度在46-1500之间，如果太小则需要填充。</li><li>FCS：帧检验序列「CRC」</li></ul><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403205.png" alt="image-20250312203108382" tabindex="0" loading="lazy"><figcaption>image-20250312203108382</figcaption></figure><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403530.png" alt="image-20250312202903283" tabindex="0" loading="lazy"><figcaption>image-20250312202903283</figcaption></figure><p>交换机具有<strong>自学习能力</strong>，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射。</p><p>正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。</p><p>下图中，交换机有 4 个接口，主机 A 向主机 B 发送数据帧时，交换机把主机 A 到接口 1 的映射写入交换表中。为了发送数据帧到 B，先查交换表，此时没有主机 B 的表项，那么主机 A 就发送广播帧，主机 C 和主机 D 会丢弃该帧，主机 B 回应该帧向主机 A 发送数据包时，交换机查找交换表得到主机 A 映射的接口为 1，就发送数据帧到接口 1，同时交换机添加主机 B 到接口 2 的映射。</p><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403616.png" alt="image-20250312203406620" tabindex="0" loading="lazy"><figcaption>image-20250312203406620</figcaption></figure><p>每条记录都有自己的有效时间，到期自动删除！因为MAC地址与交换机接口的对应关系并不是永久性的「换网卡，换电脑...」</p><p><strong>以太网交换机的生成树协议STP：</strong></p><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403670.png" alt="image-20250312204036767" tabindex="0" loading="lazy"><figcaption>image-20250312204036767</figcaption></figure><h2 id="虚拟局域网" tabindex="-1"><a class="header-anchor" href="#虚拟局域网"><span>虚拟局域网</span></a></h2><p>虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。</p><p>例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。</p><p>使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网。</p><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403609.png" alt="image-20250312204259489" tabindex="0" loading="lazy"><figcaption>image-20250312204259489</figcaption></figure>',38)]))}const s=a(o,[["render",g]]),p=JSON.parse('{"path":"/network/e5n7aa47/","title":"数据链路层","lang":"zh-CN","frontmatter":{"title":"数据链路层","createTime":"2025/04/14 08:43:58","permalink":"/network/e5n7aa47/","description":"三个重要问题「点对点信道」 封装成帧 封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧「帧头和帧尾中包含重要的控制信息，作用之一就是帧定界」。 透明传输是指数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样。 面向字节的物理链路使用字节填充的方法实现透明传输 面向比特的物理链路使用比特填充的方法实现透明传输 i...","head":[["meta",{"property":"og:url","content":"https://xiaokcoding.top/network/e5n7aa47/"}],["meta",{"property":"og:site_name","content":"XiaokCoding"}],["meta",{"property":"og:title","content":"数据链路层"}],["meta",{"property":"og:description","content":"三个重要问题「点对点信道」 封装成帧 封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧「帧头和帧尾中包含重要的控制信息，作用之一就是帧定界」。 透明传输是指数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样。 面向字节的物理链路使用字节填充的方法实现透明传输 面向比特的物理链路使用比特填充的方法实现透明传输 i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403145.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-14T05:32:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-14T05:32:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据链路层\\",\\"image\\":[\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403145.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403258.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403157.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403165.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403228.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403205.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403530.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403616.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403670.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250414084403609.png\\"],\\"dateModified\\":\\"2025-04-14T05:32:06.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":6.53,"words":1959},"git":{"updatedTime":1744608726000,"contributors":[{"name":"xiaokcoding","username":"xiaokcoding","email":"1512392199@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/xiaokcoding?v=4","url":"https://github.com/xiaokcoding"}]},"autoDesc":true,"filePathRelative":"notes/计算机网络/03.数据链路层.md"}');export{s as comp,p as data};
