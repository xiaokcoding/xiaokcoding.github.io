import{_ as l,c as r,a as t,d as s,b as a,w as n,r as k,o as p,e as h}from"./app-gdwmcdjK.js";const d={},o={class:"task-list-container"},c={class:"task-list-item"},g={class:"task-list-item-label",for:"task-item-0"},y={class:"task-list-container"},A={class:"task-list-item"},m={class:"task-list-item-label",for:"task-item-1"},f={class:"task-list-container"},u={class:"task-list-item"},b={class:"task-list-item-label",for:"task-item-2"},v={class:"task-list-container"},_={class:"task-list-item"},D={class:"task-list-item-label",for:"task-item-3"};function B(C,i){const e=k("font");return p(),r("div",null,[i[8]||(i[8]=t(`<h2 id="std-ratio" tabindex="-1"><a class="header-anchor" href="#std-ratio"><span><code>std::ratio</code></span></a></h2><p>类模板 <code>std::ratio</code> 及相关的模板提供编译时有理数(整数和分数的集合)算术支持。此模板的每个实例化都准确表示任一有限有理数。此模板的每个实例化都准确表示任一确定有理数，只要分子 <code>Num</code> 与分母 <code>Denom</code> 能表示为 <a href="https://zh.cppreference.com/w/cpp/types/integer" target="_blank" rel="noopener noreferrer">std::intmax_t</a> 类型的编译时常量。另外， <code>Denom</code> 不可为零且不可等于最负的值。</p><p><u>约分分子和分母到最简：</u></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ratio</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">num</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">den</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过<code>type</code>类型获约分后的类型<code>std::ratio&lt;2, 10&gt;::type</code>，另外，如果分子分母都是负数，那么分子分母都将变为正整数。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ratio</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;-</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">num</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">den</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有，如果只有分子或分母中的一个是负数，那么负号将移到分子上。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ratio</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">num</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//-1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">den</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标准库提供数个对应 <code>SI</code>( 国际单位制) <code>ratio</code>的方便别名 ：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> atto</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000000000000000000</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">LL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> femto</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000000000000000</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">LL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> pico</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000000000000</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">LL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> nano</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000000000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> micro</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> milli</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> centi</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> deci</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">								//十分之一(一比十)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> deca</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">								//十(十比一)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> hecto</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> kilo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> mega</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> giga</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000000000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> tera</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000000000000</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">LL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> peta</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000000000000000</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">LL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> exa</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">   =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000000000000000000</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">LL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译时有理数算术" tabindex="-1"><a class="header-anchor" href="#编译时有理数算术"><span>编译时有理数算术</span></a></h3><p>提供数个别名模板，它们在编译时进行 <code>ratio</code> 实例上的算术。</p><table><thead><tr><th style="text-align:center;">在标头 <code>&lt;ratio&gt;</code> 定义</th><th></th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://zh.cppreference.com/w/cpp/numeric/ratio/ratio_add" target="_blank" rel="noopener noreferrer">ratio_add</a></td><td>在编译时相加两个 <code>ratio</code> 对象 (别名模板)</td></tr><tr><td style="text-align:center;"><a href="https://zh.cppreference.com/w/cpp/numeric/ratio/ratio_subtract" target="_blank" rel="noopener noreferrer">ratio_subtract</a></td><td>在编译时相减两个 <code>ratio</code> 对象 (别名模板)</td></tr><tr><td style="text-align:center;"><a href="https://zh.cppreference.com/w/cpp/numeric/ratio/ratio_multiply" target="_blank" rel="noopener noreferrer">ratio_multiply</a></td><td>在编译时相乘两个 <code>ratio</code> 对象 (别名模板)</td></tr><tr><td style="text-align:center;"><a href="https://zh.cppreference.com/w/cpp/numeric/ratio/ratio_divide" target="_blank" rel="noopener noreferrer">ratio_divide</a></td><td>在编译时相除两个 <code>ratio</code> 对象 (别名模板)</td></tr></tbody></table><p><code>&lt;u&gt;example：&lt;/u&gt;</code></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ratio_add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">nano</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> micro</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="编译时有理数比较" tabindex="-1"><a class="header-anchor" href="#编译时有理数比较"><span>编译时有理数比较</span></a></h3><p>提供数个类模板，它们在编译时进行 <code>ratio</code> 实例上的比较运算。</p><table><thead><tr><th style="text-align:center;">在标头 <code>&lt;ratio&gt;</code> 定义</th><th></th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://zh.cppreference.com/w/cpp/numeric/ratio/ratio_equal" target="_blank" rel="noopener noreferrer">ratio_equal</a></td><td>在编译时比较两个 <code>ratio</code> 对象的相等性 (类模板)</td></tr><tr><td style="text-align:center;"><a href="https://zh.cppreference.com/w/cpp/numeric/ratio/ratio_not_equal" target="_blank" rel="noopener noreferrer">ratio_not_equal</a></td><td>在编译时比较两个 <code>ratio</code> 对象的不相等性 (类模板)</td></tr><tr><td style="text-align:center;"><a href="https://zh.cppreference.com/w/cpp/numeric/ratio/ratio_less" target="_blank" rel="noopener noreferrer">ratio_less</a></td><td>在编译时比较两个 <code>ratio</code> 对象的_小于_关系 (类模板)</td></tr><tr><td style="text-align:center;"><a href="https://zh.cppreference.com/w/cpp/numeric/ratio/ratio_less_equal" target="_blank" rel="noopener noreferrer">ratio_less_equal</a></td><td>在编译时比较两个 <code>ratio</code> 对象的_小于或等于_关系 (类模板)</td></tr><tr><td style="text-align:center;"><a href="https://zh.cppreference.com/w/cpp/numeric/ratio/ratio_greater" target="_blank" rel="noopener noreferrer">ratio_greater</a></td><td>在编译时比较两个 <code>ratio</code> 对象的_大于_关系 (类模板)</td></tr><tr><td style="text-align:center;"><a href="https://zh.cppreference.com/w/cpp/numeric/ratio/ratio_greater_equal" target="_blank" rel="noopener noreferrer">ratio_greater_equal</a></td><td>在编译时比较两个 <code>ratio</code> 对象的_大于或等于_关系 (类模板)</td></tr></tbody></table><p><code>example：</code></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ratio_equal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&gt;::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="std-chrno" tabindex="-1"><a class="header-anchor" href="#std-chrno"><span><code>std::chrno</code></span></a></h2><p><code>chrno</code>是<code>C++</code>日期时间库，以各种精度跟踪时间的类型的灵活汇集。</p><p><code>chrono</code> 库定义三种主要类型以及工具函数和常用<code> using</code>别名。</p><ul><li><code>clock</code> 时钟</li><li><code>duration</code> 时长</li><li><code>time_point </code>时间点</li></ul><h3 id="duration" tabindex="-1"><a class="header-anchor" href="#duration"><span>duration</span></a></h3>`,25)),s("ul",o,[s("li",c,[i[1]||(i[1]=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-0",checked:"checked",disabled:"disabled"},null,-1)),s("label",g,[a(e,{style:{"background-color":"#FBDE28"}},{default:n(()=>i[0]||(i[0]=[h("定义对象")])),_:1})])])]),i[9]||(i[9]=t('<p><code>std::chrono::duration</code> 表示时长，时长由时间跨度组成，定义为某时间单位的某个计次数。例如，“ 42 秒”可表示为由 42 个 1 秒时间点位的计次所组成的时长。<code>duration</code>类模板定义如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> _Rep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> _Period</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> duration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>- `_Rep：`表示一种数值类型，用来表示`_Period`的数量，比如`int、float、double...`\n- `_Period`：是`std::ratio`类型，用来表示（用秒表示的）单位，比如`second、milisecond...`\n</code></pre><p>比如，想要表示一个秒数，代码如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">duration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">long</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> long</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> mysec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">			//mysec表示10秒</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>std::chrono</code> 命名空间名太长了，可以简化一下 <code>namespace co = std::chrono;</code>因为<code>duration</code>第二个模板默认值就是<code>std::ratio&lt;1,1&gt;</code>，所以还可以简写为如下形式：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">co</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">duration</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">lt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">long</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> long&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">gt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> mysec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果想要表示分钟怎么办呢？</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">duration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">long</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> long</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 60</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> myminute</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//myminute表示10分钟</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上述代码中<code>std::ratio</code>比例为<code>1/60</code>，表示一分钟等于60秒。</p>',10)),s("ul",y,[s("li",A,[i[3]||(i[3]=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-1",checked:"checked",disabled:"disabled"},null,-1)),s("label",m,[a(e,{style:{"background-color":"#FBDE28"}},{default:n(()=>i[2]||(i[2]=[h("辅助类型")])),_:1})])])]),i[10]||(i[10]=t(`<p>其实不需要这么复杂，因为常用的时长类型已经被预定义好了！如下表所示：</p><table><thead><tr><th>类型</th><th>定义</th></tr></thead><tbody><tr><td><strong>std::chrono::nanoseconds</strong></td><td>duration&lt;long long, nano&gt;</td></tr><tr><td><strong>std::chrono::microseconds</strong></td><td>duration&lt;long long, micro&gt;;</td></tr><tr><td><strong>std::chrono::milliseconds</strong></td><td>duration&lt;long long, milli&gt;;</td></tr><tr><td><strong>std::chrono::seconds</strong></td><td>duration&lt;long long&gt;;</td></tr><tr><td><strong>std::chrono::minutes</strong></td><td>duration&lt;int, ratio&lt;60&gt;&gt;;</td></tr><tr><td><strong>std::chrono::hours</strong></td><td>duration&lt;int, ratio&lt;3600&gt;&gt;;</td></tr><tr><td>std::chrono::days (C++20 起)</td><td>duration&lt;int, ratio_multiply&lt;ratio&lt;24&gt;, hours::period&gt;&gt;;</td></tr><tr><td>std::chrono::weeks (C++20 起)</td><td>duration&lt;int, ratio_multiply&lt;ratio&lt;7&gt;, days::period&gt;&gt;;</td></tr><tr><td>std::chrono::months (C++20 起)</td><td>duration&lt;int, ratio_multiply&lt;ratio&lt;146097, 400&gt;, days::period&gt;&gt;;</td></tr><tr><td>std::chrono::years (C++20 起)</td><td>duration&lt;int, ratio_divide&lt;years::period, ratio&lt;12&gt;&gt;&gt;;</td></tr></tbody></table><p>用辅助类型定义对象就非常简单了！</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">seconds</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> longtime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">60</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">		//60秒</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">days</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	mydays</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">30</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">			//30天</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，其实有更方便的方法，<code>C++</code>为我们提供了字面量重载函数。</p>`,5)),s("ul",f,[s("li",u,[i[5]||(i[5]=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-2",checked:"checked",disabled:"disabled"},null,-1)),s("label",b,[a(e,{style:{"background-color":"#FBDE28"}},{default:n(()=>i[4]||(i[4]=[h("字面量")])),_:1})])])]),i[11]||(i[11]=t(`<p>在内联命名空间 <code>std::literals::chrono_literals</code> 定义</p><table><thead><tr><th>字面量函数</th><th>含义</th></tr></thead><tbody><tr><td><a href="https://zh.cppreference.com/w/cpp/chrono/operator%22%22h" target="_blank" rel="noopener noreferrer">operator&quot;&quot;h</a>(C++14)</td><td>表示小时的 <strong>std::chrono::duration</strong> 字面量 (函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/chrono/operator%22%22min" target="_blank" rel="noopener noreferrer">operator&quot;&quot;min</a>(C++14)</td><td>表示分钟的 <strong>std::chrono::duration</strong> 字面量 (函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/chrono/operator%22%22s" target="_blank" rel="noopener noreferrer">operator&quot;&quot;s</a>(C++14)</td><td>表示秒的 <strong>std::chrono::duration</strong> 字面量 (函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/chrono/operator%22%22ms" target="_blank" rel="noopener noreferrer">operator&quot;&quot;ms</a>(C++14)</td><td>表示毫秒的 <strong>std::chrono::duration</strong> 字面量 (函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/chrono/operator%22%22us" target="_blank" rel="noopener noreferrer">operator&quot;&quot;us</a>(C++14)</td><td>表示微秒的 <strong>std::chrono::duration</strong> 字面量 (函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/chrono/operator%22%22ns" target="_blank" rel="noopener noreferrer">operator&quot;&quot;ns</a>(C++14)</td><td>表示纳秒的 <strong>std::chrono::duration</strong> 字面量 (函数)</td></tr></tbody></table><p>注意：字面量后缀 <code>d</code> 和 <code>y</code> 不指代 <code>days</code> 和 <code>years</code> ，而是分别指代 <code>day</code> 和 <code>year</code> 。 (<code>C++20</code> 起)</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">seconds longtime </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 60</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">days	monthOfDays </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 30</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//error:“初始化”: 无法从“std::chrono::day”转换为“std::chrono::days”</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("ul",v,[s("li",_,[i[7]||(i[7]=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-3",checked:"checked",disabled:"disabled"},null,-1)),s("label",D,[a(e,{style:{"background-color":"#FBDE28"}},{default:n(()=>i[6]||(i[6]=[h("成员函数")])),_:1})])])]),i[12]||(i[12]=t(`<ul><li><strong><u>获取计数</u></strong></li></ul><p>首先，我们来定义一个表示分钟的时长对象。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">minutes mins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>除了初始化之外，还可以给它赋值。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mins </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">min</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>要获取值，则可以通过成员函数<code>count</code>获取。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> mins </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果为：<code>20min 20</code>，从上面可以看到，也能直接输出<code>duration</code>对象，只不过会加上单位作为后缀。如果输出的不是预定义的类型，则会有不一样的效果。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">duration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">long</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> long</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ratio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&gt;(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果为：<code>5[1/20]s</code>，那么最大能表示多少分钟，最小能表示多分钟呢？可以通过下面的静态方法获取！</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">zero</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">min</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">max</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果为：<code>0min -2147483648min 2147483647min</code></p><ul><li><strong><u>转换</u></strong></li></ul><p>如果需要把分钟转成秒，则可以通过函数<a href="https://zh.cppreference.com/w/cpp/chrono/duration/duration_cast" target="_blank" rel="noopener noreferrer">duration_cast</a>实现。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">auto</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">duration_cast</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">seconds</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">20 minute is </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> seconds</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果为：<code>20 minute is 1200 seconds</code>，下面代码把分钟转成小时：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">auto</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> h </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">duration_cast</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">hours</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">20 minute is </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> h </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hours</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果为：<code>20 minute is 0 hours</code>，竟然是0小时？没错这个是没有小数部分的，那如果要不满一小时，算一小时怎么办呢？答案是使用<code>ceil</code>函数进行向上取整的转换。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">auto</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> h </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ceil</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">hours</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">20 minute is </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> h </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hours</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果为：<code>20 minute is 1 hours</code>，同样还有向下取整函数<code>floor</code>、就近取整函数<code>round</code>。如果你的时长是一个负值，还可以通过<code>abs</code>获取绝对值。</p><ul><li><strong><u>算术运算</u></strong></li></ul><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250406164941087.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="clock" tabindex="-1"><a class="header-anchor" href="#clock"><span><code>clock</code></span></a></h3><p>时钟由起点（或纪元）及计次频率组成。例如，时钟可以拥有 1970 年 1 月 1 日的纪元，和每一秒的计次。</p><p>C++ 定义数种时钟类型：</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"><code>**&lt;u&gt;system_clock&lt;/u&gt;**</code></label></li></ul><p>类 <code>std::chrono::system_clock</code> 表示系统范围的实时挂钟。首先，获取当前时间。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">auto</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> currentTime </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">system_clock</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">now</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>system_clock</code>是获取从协调世界时<code>(UTC)</code>1970 年 1 月 1 日星期四 00:00:00 开始的时间。可以直接输出。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> currentTime </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果为：<code>2023-07-28 14:20:15.4173841</code>，还提供了<code>to_time_t</code>和<code>from_time_t</code>函数，让系统时钟时间点和<code>time_t</code>之间进行转换。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//转换系统时钟时间点为time_t</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">time_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> t </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">system_clock</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">to_time_t</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">currentTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//转换time_t到系统时钟时间点</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">auto</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> nowTime </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">system_clock</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">from_time_t</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">time</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">nullptr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<code>chrono::system_clock::now();</code>函数返回的是一个时间点(<a href="#time_point">time_point</a>)对象。</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"><code>**&lt;u&gt;steady_clock&lt;/u&gt;**</code></label></li></ul><p><code>std::chrono::steady_clock</code>表示单调时钟。这个时钟的时间点不会随着物理时间的向前移动而减少，并且这个时钟的滴答之间的时间是恒定的。这个时钟与挂钟时间无关(例如，它可以是自上次重新启动以来的时间)，最适合测量时间间隔。只有一个静态函数，即获取时间。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> time_point</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> now</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>还有一个静态常量，用来判断是否是<code>steady</code>时钟。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> constexpr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> bool</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> is_steady</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"><code>**&lt;u&gt;high_resolution_clock&lt;/u&gt;**</code></label></li></ul><p><code>std::chrono::high_resolution_clock </code>类表示实现提供的具有最小滴答周期(精度最高)的时钟。它可以是<code>std::chrono::system_clock</code>或<code>std::chrono::steady_clock</code>的别名，也可以是第三个独立时钟(看具体实现)。</p><h3 id="time-point" tabindex="-1"><a class="header-anchor" href="#time-point"><span><code>time_point</code></span></a></h3><p>时间点是从特定时钟的纪元开始经过的时间时长。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">system_clock</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">time_point nowTime </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  chrono</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">system_clock</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">now</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以通过函数获取自1970年以来开始的时长<code>(chrono::system_clock::duration)</code>(纳秒数)。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> nowTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">time_since_epoch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行结果为：<code>16905550612558537[1/10000000]s</code>，除此之外，还支持各种运算：</p><ul><li>成员函数</li></ul><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250406164941088.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>非成员函数</li></ul><figure><img src="https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250406164941089.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><a href="https://www.coder.work/article/6593595" target="_blank" rel="noopener noreferrer">c++ - 为什么在 C++ 中获取日期和/或时间如此复杂？ - IT工具网</a></p><h2 id="std-filesystem-c-17" tabindex="-1"><a class="header-anchor" href="#std-filesystem-c-17"><span><code>std::filesystem(C++17)</code></span></a></h2><p><code>Filesystem</code>库提供了对文件系统及其组件(如路径、常规文件和目录)执行操作的工具。</p><p>先搞清楚一些概念：</p><ul><li><strong>文件</strong>：持有数据的文件系统对象，能被写入或读取，或二者皆可。文件拥有名称及属性，属性之一是文件类型： <ul><li><em>目录</em>：表现为目录条目的容器的文件，目录条目标识其他文件（其中一些可以是另外的嵌套的目录）。讨论到具体文件时，包含该文件目录条目的目录是其_父目录_。父目录能以相对路径名 <code>&quot;..&quot;</code> 表示。</li><li><em>硬链接</em>：关联一个名字到一个既存文件的目录条目。若支持多重硬链接，则文件在最后一个到它的硬链接被移除后才被移除。</li><li><em>符号链接</em>：关联一个名词到一个路径的目录条目，路径可以存在亦可不存在。</li><li><em>常规文件</em>：不是其他文件类型的文件。</li></ul></li><li><strong>文件名</strong>：命名一个文件的字符串。名称<code> &quot;.&quot;</code> （点）与<code>&quot;..&quot;</code>（双点）在库层次拥有特殊含义。</li><li><strong>路径</strong>：标识一个文件的元素序列。它以可选的_根名_ （例如<code>Windows</code>上的<code> &quot;C:&quot;</code> 或 <code>&quot;//server&quot;</code> ）开始，后随可选的_根目录_ （例如<code> Unix</code> 上的<code> &quot;/&quot;</code> ），后随零或更多个文件名（除了最后一个都必须是目录或到目录的链接）的序列。表示路径的字符串（<em>路径名</em>）的原生格式（如哪些字符被用作分隔符）与字符编码是实现定义的，库提供路径的可移植表示。</li></ul><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path"><span><code>path</code></span></a></h3><p>类型 <code>path</code> 的对象表示文件系统上的路径。只有路径的语法外观得到处理：路径名可能表示不存在的路径，或甚至不允许存在于当前文件系统或操作系统的路径。路径可以隐式地与<code>**std::basic_string**</code>进行转换，这使得可以将它们与其他文件<code>api</code>一起使用。</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-7"><code>**&lt;u&gt;Member functions&lt;/u&gt;**</code></label></li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/assign" target="_blank" rel="noopener noreferrer">assign</a></td><td>分配内容(会把原来的内容清空，和operatro=一样)</td></tr><tr><td><strong>连接</strong></td><td></td></tr><tr><td>append <a href="https://en.cppreference.com/w/cpp/filesystem/path/append" target="_blank" rel="noopener noreferrer">operator/=</a></td><td>使用目录分隔符(&#39;/&#39;,&#39;&#39;)向路径追加元素</td></tr><tr><td>concat <a href="https://en.cppreference.com/w/cpp/filesystem/path/concat" target="_blank" rel="noopener noreferrer">operator+=</a></td><td>连接两个路径而不引入目录分隔符</td></tr><tr><td><strong>修改</strong></td><td></td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/clear" target="_blank" rel="noopener noreferrer">clear</a></td><td>清空内容</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/make_preferred" target="_blank" rel="noopener noreferrer">make_preferred</a></td><td>将目录分隔符转换为首选目录分隔符</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/remove_filename" target="_blank" rel="noopener noreferrer">remove_filename</a></td><td>移除文件名路径组件</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/replace_filename" target="_blank" rel="noopener noreferrer">replace_filename</a></td><td>用另一个路径替换最后一个路径组件</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/replace_extension" target="_blank" rel="noopener noreferrer">replace_extension</a></td><td>替换扩展名</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/swap" target="_blank" rel="noopener noreferrer">swap</a></td><td>交换两个路径</td></tr><tr><td><strong>获取不同格式的路径</strong></td><td></td></tr><tr><td>c_str native <a href="https://en.cppreference.com/w/cpp/filesystem/path/native" target="_blank" rel="noopener noreferrer">operator string_type</a></td><td>返回路径的本机版本</td></tr><tr><td>string wstring u8string u16string <a href="https://en.cppreference.com/w/cpp/filesystem/path/string" target="_blank" rel="noopener noreferrer">u32string</a></td><td>将本机路径名格式的路径转换为字符串</td></tr><tr><td>generic_string generic_wstring generic_u8string generic_u16string <a href="https://en.cppreference.com/w/cpp/filesystem/path/generic_string" target="_blank" rel="noopener noreferrer">generic_u32string</a></td><td>返回转换为字符串的通用路径名格式的路径</td></tr><tr><td><strong>比较</strong></td><td></td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/compare" target="_blank" rel="noopener noreferrer">compare</a></td><td>按字典顺序比较两个路径的词法表示</td></tr><tr><td><strong>生成</strong></td><td></td></tr><tr><td>lexically_normal</td><td>将路径转换为标准形式</td></tr><tr><td>lexically_relative</td><td>将路径转换为相对形式</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/lexically_normal" target="_blank" rel="noopener noreferrer">lexically_proximate</a></td><td>将路径转换为近似形式</td></tr><tr><td><strong>分解</strong></td><td></td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/root_name" target="_blank" rel="noopener noreferrer">root_name</a></td><td>返回路径的根名称(如果存在)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/root_directory" target="_blank" rel="noopener noreferrer">root_directory</a></td><td>返回路径的根目录(如果存在)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/root_path" target="_blank" rel="noopener noreferrer">root_path</a></td><td>返回路径的根路径(如果存在)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/relative_path" target="_blank" rel="noopener noreferrer">relative_path</a></td><td>返回相对于根路径的路径</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/parent_path" target="_blank" rel="noopener noreferrer">parent_path</a></td><td>返回父路径的路径</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/filename" target="_blank" rel="noopener noreferrer">filename</a></td><td>返回文件名路径组件</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/stem" target="_blank" rel="noopener noreferrer">stem</a></td><td>返回主干路径组件(文件名不带最终扩展名)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/extension" target="_blank" rel="noopener noreferrer">extension</a></td><td>返回文件扩展名路径组件</td></tr><tr><td><strong>查询</strong></td><td></td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/empty" target="_blank" rel="noopener noreferrer">empty</a></td><td>检查路径是否为空</td></tr><tr><td>has_root_path has_root_name has_root_directory has_relative_path has_parent_path has_filename has_stem <a href="https://en.cppreference.com/w/cpp/filesystem/path/has_path" target="_blank" rel="noopener noreferrer">has_extension</a></td><td>检查相应的路径元素是否为空</td></tr><tr><td>is_absolute <a href="https://en.cppreference.com/w/cpp/filesystem/path/is_absrel" target="_blank" rel="noopener noreferrer">is_relative</a></td><td>检查root_path()是否唯一标识文件系统位置</td></tr><tr><td><strong>迭代器</strong></td><td></td></tr><tr><td>begin <a href="https://en.cppreference.com/w/cpp/filesystem/path/begin" target="_blank" rel="noopener noreferrer">end</a></td><td>迭代器以元素序列的形式访问路径</td></tr></tbody></table><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-8" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-8"><code>**&lt;u&gt;Non-member functions&lt;/u&gt;**</code></label></li></ul><table><thead><tr><th>定义在命名空间 <code>std::filesystem</code></th><th></th></tr></thead><tbody><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/swap2" target="_blank" rel="noopener noreferrer">swap(std::filesystem::path)</a></td><td>交换两个路径</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/hash_value" target="_blank" rel="noopener noreferrer">hash_value</a></td><td>计算路径对象(函数)的哈希值</td></tr><tr><td>operator== <a href="https://en.cppreference.com/w/cpp/filesystem/path/operator_cmp" target="_blank" rel="noopener noreferrer">operator&lt;=&gt;</a>(C++20)</td><td>按字典顺序比较两个路径</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/path/operator_slash" target="_blank" rel="noopener noreferrer">operator/</a></td><td>使用目录分隔符连接两个路径</td></tr><tr><td>operator&lt;&lt; <a href="https://en.cppreference.com/w/cpp/filesystem/path/operator_ltltgtgt" target="_blank" rel="noopener noreferrer">operator&gt;&gt;</a></td><td>在带引号的路径上执行流输入和输出</td></tr></tbody></table><table><thead><tr><th>File types</th><th></th></tr></thead><tbody><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/is_block_file" target="_blank" rel="noopener noreferrer">is_block_file</a></td><td>检查给定路径是否指向块设备(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/is_character_file" target="_blank" rel="noopener noreferrer">is_character_file</a></td><td>检查给定的路径是否指向字符设备(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/is_directory" target="_blank" rel="noopener noreferrer">is_directory</a></td><td>检查给定的路径是否指向一个目录(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/is_empty" target="_blank" rel="noopener noreferrer">is_empty</a></td><td>检查给定的路径是否指向空文件或目录(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/is_fifo" target="_blank" rel="noopener noreferrer">is_fifo</a></td><td>检查给定路径是否引用命名管道(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/is_other" target="_blank" rel="noopener noreferrer">is_other</a></td><td>检查参数是否引用了“其他”文件(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/is_regular_file" target="_blank" rel="noopener noreferrer">is_regular_file</a></td><td>检查参数是否引用常规文件(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/is_socket" target="_blank" rel="noopener noreferrer">is_socket</a></td><td>检查参数是否引用了一个命名的IPC套接字(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/is_symlink" target="_blank" rel="noopener noreferrer">is_symlink</a></td><td>检查参数是否引用符号链接(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/status_known" target="_blank" rel="noopener noreferrer">status_known</a>(</td><td>检查文件状态是否已知(函数)</td></tr></tbody></table><table><thead><tr><th><a href="https://en.cppreference.com/w/cpp/filesystem/absolute" target="_blank" rel="noopener noreferrer">absolute</a></th><th>组成一个绝对路径</th></tr></thead><tbody><tr><td>canonical <a href="https://en.cppreference.com/w/cpp/filesystem/canonical" target="_blank" rel="noopener noreferrer">weakly_canonical</a></td><td>组成一个规范路径</td></tr><tr><td>relative <a href="https://en.cppreference.com/w/cpp/filesystem/relative" target="_blank" rel="noopener noreferrer">proximate</a></td><td>合成一个相对路径(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/copy" target="_blank" rel="noopener noreferrer">copy</a></td><td>复制文件或目录(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/copy_file" target="_blank" rel="noopener noreferrer">copy_file</a></td><td>复制文件内容(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/copy_symlink" target="_blank" rel="noopener noreferrer">copy_symlink</a></td><td>复制一个符号链接(函数)</td></tr><tr><td>create_directory <a href="https://en.cppreference.com/w/cpp/filesystem/create_directory" target="_blank" rel="noopener noreferrer">create_directories</a></td><td>创建新目录(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/create_hard_link" target="_blank" rel="noopener noreferrer">create_hard_link</a></td><td>创建一个硬链接(函数)</td></tr><tr><td>create_symlink <a href="https://en.cppreference.com/w/cpp/filesystem/create_symlink" target="_blank" rel="noopener noreferrer">create_directory_symlink</a></td><td>创建一个符号链接(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/current_path" target="_blank" rel="noopener noreferrer">current_path</a></td><td>返回或设置当前工作目录(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/exists" target="_blank" rel="noopener noreferrer">exists</a></td><td>检查path是否引用了现有的文件系统对象(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/equivalent" target="_blank" rel="noopener noreferrer">equivalent</a></td><td>检查两个路径是否指向同一个文件系统对象(function)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/file_size" target="_blank" rel="noopener noreferrer">file_size</a></td><td>返回文件的大小(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/hard_link_count" target="_blank" rel="noopener noreferrer">hard_link_count</a></td><td>返回指向特定文件(函数)的硬链接数。</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/last_write_time" target="_blank" rel="noopener noreferrer">last_write_time</a></td><td>获取或设置最后一次数据修改的时间(函数)。</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/permissions" target="_blank" rel="noopener noreferrer">permissions</a></td><td>修改文件访问权限(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/read_symlink" target="_blank" rel="noopener noreferrer">read_symlink</a></td><td>获取符号链接(函数)的目标。</td></tr><tr><td>remove <a href="https://en.cppreference.com/w/cpp/filesystem/remove" target="_blank" rel="noopener noreferrer">remove_all</a></td><td>删除文件或空目录，递归地删除文件或目录及其所有内容(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/rename" target="_blank" rel="noopener noreferrer">rename</a></td><td>移动或重命名文件或目录(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/resize_file" target="_blank" rel="noopener noreferrer">resize_file</a></td><td>通过截断或零填充改变常规文件的大小(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/space" target="_blank" rel="noopener noreferrer">space</a></td><td>确定文件系统(函数)上的可用空闲空间</td></tr><tr><td>status <a href="https://en.cppreference.com/w/cpp/filesystem/status" target="_blank" rel="noopener noreferrer">symlink_status</a></td><td>确定文件属性确定文件属性，检查符号链接目标(函数)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/temp_directory_path" target="_blank" rel="noopener noreferrer">temp_directory_path</a></td><td>返回适合存放临时文件的目录</td></tr></tbody></table><h3 id="directory-entry" tabindex="-1"><a class="header-anchor" href="#directory-entry"><span><code>directory_entry</code></span></a></h3><p><code>std::filesystem::directory_entry</code>表示目录项。该对象将路径作为成员存储，还可以在目录迭代期间存储其他文件属性(硬链接计数、状态、符号链接状态、文件大小和最后写时间)。</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-9" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-9"><code>**&lt;u&gt;Member functions&lt;/u&gt;**</code></label></li></ul><table><thead><tr><th>修改</th><th></th></tr></thead><tbody><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/operator%3D" target="_blank" rel="noopener noreferrer">operator=</a></td><td>分配的内容</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/assign" target="_blank" rel="noopener noreferrer">assign</a></td><td>分配的内容</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/replace_filename" target="_blank" rel="noopener noreferrer">replace_filename</a></td><td>设置文件名</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/refresh" target="_blank" rel="noopener noreferrer">refresh</a></td><td>更新缓存的文件属性</td></tr><tr><td>观察</td><td></td></tr><tr><td>path <a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/path" target="_blank" rel="noopener noreferrer">operator const path&amp;</a></td><td>返回目录项所引用的路径</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/exists" target="_blank" rel="noopener noreferrer">exists</a></td><td>检查目录项是否引用现有的文件系统对象(是否存在)</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/is_block_file" target="_blank" rel="noopener noreferrer">is_block_file</a></td><td>检查目录项是否指向块设备</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/is_character_file" target="_blank" rel="noopener noreferrer">is_character_file</a></td><td>检查目录项是否是字符设备</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/is_directory" target="_blank" rel="noopener noreferrer">is_directory</a></td><td>检查目录项是否是目录</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/is_fifo" target="_blank" rel="noopener noreferrer">is_fifo</a></td><td>检查目录项是否是命名管道</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/is_other" target="_blank" rel="noopener noreferrer">is_other</a></td><td>检查目录项是否是“其他”文件</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/is_regular_file" target="_blank" rel="noopener noreferrer">is_regular_file</a></td><td>检查目录项是否是常规文件</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/is_socket" target="_blank" rel="noopener noreferrer">is_socket</a></td><td>检查目录条目是否是一个命名的IPC套接字</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/is_symlink" target="_blank" rel="noopener noreferrer">is_symlink</a></td><td>检查目录项是否是符号链接</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/file_size" target="_blank" rel="noopener noreferrer">file_size</a></td><td>返回目录项所指向的文件的大小</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/hard_link_count" target="_blank" rel="noopener noreferrer">hard_link_count</a></td><td>返回指向目录项所指向的文件的硬链接数</td></tr><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/last_write_time" target="_blank" rel="noopener noreferrer">last_write_time</a></td><td>获取或设置目录项所引用的文件的最后一次数据修改的时间</td></tr><tr><td>status <a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/status" target="_blank" rel="noopener noreferrer">symlink_status</a></td><td>该目录项指定的文件的状态 该目录项指定的文件的Symlink_status</td></tr><tr><td>operator== <a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/operator_cmp" target="_blank" rel="noopener noreferrer">operator&lt;=&gt;</a></td><td>比较两个目录项</td></tr></tbody></table><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-10" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-10"><code>**&lt;u&gt;Non-member functions&lt;/u&gt;**</code></label></li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/operator_ltlt" target="_blank" rel="noopener noreferrer">operator&lt;&lt;</a></td><td>对目录项执行流输出(函数)</td></tr></tbody></table><h3 id="directory-iterator" tabindex="-1"><a class="header-anchor" href="#directory-iterator"><span><code>directory_iterator</code></span></a></h3><p><code>directory_iterator</code>是一个<code>LegacyInputIterator()</code>，它遍历目录的<code>directory_entry</code>元素(但不访问子目录)。迭代顺序没有指定，只是每个目录项只访问一次。跳过特殊的路径名.和..。遗留输入迭代器<code>(LegacyInputIterator) </code>仅保证单趟算法的有效性：一旦自增<strong>遗留输入迭代器</strong><code>**(LegacyInputIterator)** </code>，则所有其先前值的副本都可能失效。首先，使用指定的路径创建迭代器。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">filesystem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">directory_iterator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> it</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，遍历目录。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">auto&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> entry </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> dir_it</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> entry </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者通过迭代器遍历，值得注意的是，迭代器遍历之后不能再次使用，必须重新创建。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">filesystem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">directory_iterator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> dir_it</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">auto</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> it </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">filesystem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">begin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">dir_it</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     dir_it </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">filesystem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">dir_it</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> it</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">it </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="recursive-directory-iterator" tabindex="-1"><a class="header-anchor" href="#recursive-directory-iterator"><span><code>recursive_directory_iterator</code></span></a></h3><p><code>std::filesystem::recursive_directory_iterator</code>是一个<code>LegacyInputIterator</code>，它遍历目录的<code>directory_entry</code>元素，并递归地遍历所有子目录的条目。迭代顺序没有指定，只是每个目录项只访问一次。</p><p>除了和<code>**directory_iterator**</code>一样遍历目录外，还提供了一些方法。</p><ul><li>获取当前递归深度</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> depth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>检查当前目录是否禁用递归</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> recursion_pending</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>禁用递归，直到下一个增量</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> disable_recursion_pending</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>将迭代器在目录层次结构中向上移动一级</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> pop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">					//异常版本</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> pop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">error_code</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _Ec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//错误码版本</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>定的文件的状态 该目录项指定的文件的Symlink_status | | operator== <a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/operator_cmp" target="_blank" rel="noopener noreferrer">operator&lt;=&gt;</a> | 比较两个目录项 |</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-11" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-11"><code>**&lt;u&gt;Non-member functions&lt;/u&gt;**</code></label></li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://en.cppreference.com/w/cpp/filesystem/directory_entry/operator_ltlt" target="_blank" rel="noopener noreferrer">operator&lt;&lt;</a></td><td>对目录项执行流输出(函数)</td></tr></tbody></table><h3 id="directory-iterator-1" tabindex="-1"><a class="header-anchor" href="#directory-iterator-1"><span><code>directory_iterator</code></span></a></h3><p><code>directory_iterator</code>是一个<code>LegacyInputIterator()</code>，它遍历目录的<code>directory_entry</code>元素(但不访问子目录)。迭代顺序没有指定，只是每个目录项只访问一次。跳过特殊的路径名.和..。遗留输入迭代器<code>(LegacyInputIterator) </code>仅保证单趟算法的有效性：一旦自增<strong>遗留输入迭代器</strong><code>**(LegacyInputIterator)** </code>，则所有其先前值的副本都可能失效。首先，使用指定的路径创建迭代器。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">filesystem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">directory_iterator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> it</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，遍历目录。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">auto&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> entry </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> dir_it</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> entry </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者通过迭代器遍历，值得注意的是，迭代器遍历之后不能再次使用，必须重新创建。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">filesystem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">directory_iterator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> dir_it</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">auto</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> it </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">filesystem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">begin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">dir_it</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     dir_it </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">filesystem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">dir_it</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> it</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">it </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="recursive-directory-iterator-1" tabindex="-1"><a class="header-anchor" href="#recursive-directory-iterator-1"><span><code>recursive_directory_iterator</code></span></a></h3><p><code>std::filesystem::recursive_directory_iterator</code>是一个<code>LegacyInputIterator</code>，它遍历目录的<code>directory_entry</code>元素，并递归地遍历所有子目录的条目。迭代顺序没有指定，只是每个目录项只访问一次。</p><p>除了和<code>**directory_iterator**</code>一样遍历目录外，还提供了一些方法。</p><ul><li>获取当前递归深度</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> depth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>检查当前目录是否禁用递归</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> recursion_pending</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>禁用递归，直到下一个增量</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> disable_recursion_pending</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>将迭代器在目录层次结构中向上移动一级</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> pop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">					//异常版本</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> pop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">error_code</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _Ec</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//错误码版本</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,108))])}const F=l(d,[["render",B]]),w=JSON.parse('{"path":"/Cpp/woqhdwui/","title":"有理数、日期时间、文件系统","lang":"zh-CN","frontmatter":{"title":"有理数、日期时间、文件系统","createTime":"2025/04/06 16:52:26","permalink":"/Cpp/woqhdwui/","description":"std::ratio 类模板 std::ratio 及相关的模板提供编译时有理数(整数和分数的集合)算术支持。此模板的每个实例化都准确表示任一有限有理数。此模板的每个实例化都准确表示任一确定有理数，只要分子 Num 与分母 Denom 能表示为 std::intmax_t 类型的编译时常量。另外， Denom 不可为零且不可等于最负的值。 约分分子和分...","head":[["meta",{"property":"og:url","content":"https://xiaokcoding.top/Cpp/woqhdwui/"}],["meta",{"property":"og:site_name","content":"XiaokCoding"}],["meta",{"property":"og:title","content":"有理数、日期时间、文件系统"}],["meta",{"property":"og:description","content":"std::ratio 类模板 std::ratio 及相关的模板提供编译时有理数(整数和分数的集合)算术支持。此模板的每个实例化都准确表示任一有限有理数。此模板的每个实例化都准确表示任一确定有理数，只要分子 Num 与分母 Denom 能表示为 std::intmax_t 类型的编译时常量。另外， Denom 不可为零且不可等于最负的值。 约分分子和分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250406164941087.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-14T05:32:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-14T05:32:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"有理数、日期时间、文件系统\\",\\"image\\":[\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250406164941087.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250406164941088.png\\",\\"https://xiaokcoding-image.oss-cn-beijing.aliyuncs.com/20250406164941089.png\\"],\\"dateModified\\":\\"2025-04-14T05:32:06.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":17.32,"words":5196},"git":{"updatedTime":1744608726000,"contributors":[{"name":"xiaokcoding","username":"xiaokcoding","email":"1512392199@qq.com","commits":4,"avatar":"https://avatars.githubusercontent.com/xiaokcoding?v=4","url":"https://github.com/xiaokcoding"}]},"autoDesc":true,"filePathRelative":"notes/Cpp/15 . 有理数、日期时间、文件系统.md"}');export{F as comp,w as data};
